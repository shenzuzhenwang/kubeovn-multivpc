/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package gateway

import (
	v1 "example.io/pkg/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayLister defines the interface to fetch VpcNatGateway objects.
type GatewayLister interface {
	// Fetch retrieves a VpcNatGateway by its name from the cache.
	// All returned objects must be treated as read-only.
	Fetch(name string) (*v1.VpcNatGateway, error)
	// RetrieveAll lists all VpcNatGateways from the cache based on the given selector.
	// Objects returned here must be treated as read-only.
	RetrieveAll(selector labels.Selector) ([]*v1.VpcNatGateway, error)
}

// gatewayLister implements the GatewayLister interface.
type gatewayLister struct {
	cacheIndex cache.Indexer
}

// NewGatewayLister returns a new instance of GatewayLister.
func NewGatewayLister(cacheIndex cache.Indexer) GatewayLister {
	return &gatewayLister{cacheIndex: cacheIndex}
}

// RetrieveAll fetches all VpcNatGateways from the cache using the selector.
func (g *gatewayLister) RetrieveAll(selector labels.Selector) ([]*v1.VpcNatGateway, error) {
	var gateways []*v1.VpcNatGateway
	err := cache.ListAll(g.cacheIndex, selector, func(obj interface{}) {
		gateways = append(gateways, obj.(*v1.VpcNatGateway))
	})
	return gateways, err
}

// Fetch retrieves a VpcNatGateway from the cache by name.
func (g *gatewayLister) Fetch(name string) (*v1.VpcNatGateway, error) {
	item, found, err := g.cacheIndex.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, errors.NewNotFound(v1.Resource("vpcnatgateway"), name)
	}
	return item.(*v1.VpcNatGateway), nil
}

