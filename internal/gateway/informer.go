/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package gateway

import (
	"context"
	time "time"

	v1 "example.io/pkg/apis/v1"
	version "example.io/pkg/client/clientset/versioned"
	linterfaces "example.io/pkg/client/informers/externalversions/internalinterfaces"
	lister "example.io/pkg/client/listers/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// VpcNatGatewayInformer is responsible for providing shared access to informer and lister for VpcNatGateways.
type VpcNatGatewayInformer interface {
	// Informer returns a shared index informer for VpcNatGateways.
	Informer() cache.SharedIndexInformer
	// Lister returns the lister for VpcNatGateways.
	Lister() lister.VpcNatGatewayLister
}

// gatewayInformer implements the VpcNatGatewayInformer interface.
type gatewayInformer struct {
	informerFactory  linterfaces.SharedInformerFactory
	modifyListOptions linterfaces.TweakListOptionsFunc
}

// NewGatewayInformer creates a new shared informer for VpcNatGateway type.
func NewGatewayInformer(client version.Interface, syncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredGatewayInformer(client, syncPeriod, indexers, nil)
}

// NewFilteredGatewayInformer creates a filtered shared informer for VpcNatGateway type.
func NewFilteredGatewayInformer(client version.Interface, syncPeriod time.Duration, indexers cache.Indexers, modifyListOptions linterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			// List function retrieves the list of VpcNatGateways with specified options.
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if modifyListOptions != nil {
					modifyListOptions(&options)
				}
				return client.v1().VpcNatGateways().List(context.TODO(), options)
			},
			// Watch function initiates a watch for VpcNatGateways based on specified options.
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if modifyListOptions != nil {
					modifyListOptions(&options)
				}
				return client.v1().VpcNatGateways().Watch(context.TODO(), options)
			},
		},
		&v1.VpcNatGateway{},
		syncPeriod,
		indexers,
	)
}

// defaultInformer returns the default shared index informer for VpcNatGateway type.
func (g *gatewayInformer) defaultInformer(client version.Interface, syncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredGatewayInformer(client, syncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, g.modifyListOptions)
}

// Informer returns the informer associated with the gatewayInformer instance.
func (g *gatewayInformer) Informer() cache.SharedIndexInformer {
	return g.informerFactory.InformerFor(&v1.VpcNatGateway{}, g.defaultInformer)
}

// Lister returns a new lister for VpcNatGateways.
func (g *gatewayInformer) Lister() lister.VpcNatGatewayLister {
	return lister.NewVpcNatGatewayLister(g.Informer().GetIndexer())
}
